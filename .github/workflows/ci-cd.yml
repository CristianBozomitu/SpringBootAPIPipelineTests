name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  issues: write
  security-events: write

jobs:
  # Job 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Make mvnw executable
        run: chmod +x mvnw

      - name: Build with Maven
        run: ./mvnw clean install -DskipTests

      - name: Run tests
        run: ./mvnw test


  # Job 2: Code Quality Analysis
  code-quality:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # Optional: SonarCloud analysis (requires setup)
      # - name: SonarCloud Scan
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: ./mvnw sonar:sonar -Dsonar.projectKey=your-project-key

      - name: Make mvnw executable
        run: chmod +x mvnw

      - name: Check code style
        run: ./mvnw checkstyle:check || echo "Checkstyle warnings found"

  # Job 3: Docker Build and Verification
  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: spring-boot-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 4: Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Make mvnw executable
        run: chmod +x mvnw

      - name: Dependency Check
        run: |
          ./mvnw dependency-check:check || echo "Dependency vulnerabilities found"

  # Job 5: Deploy (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        run: |
          echo "Deployment triggered automatically by Render on push to main"
          echo "Your app will be live at: https://your-app.onrender.com"

      # Alternative: Deploy to Fly.io
      # - name: Deploy to Fly.io
      #   uses: superfly/flyctl-actions/setup-flyctl@master
      # - run: flyctl deploy --remote-only
      #   env:
      #     FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Notify deployment success
        run: |
          echo "âœ… Deployment successful!"
          echo "ðŸš€ Application is live"